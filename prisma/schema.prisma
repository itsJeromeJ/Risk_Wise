generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  clerkUserId   String        @unique
  email         String        @unique
  name          String?
  imageUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  monthlyIncome Decimal?
  accounts      Account[]
  budgets       Budget?
  debts         Debt[]
  transactions  Transaction[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  isDefault    Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Budget {
  id            String        @id @default(uuid())
  amount        Decimal
  lastAlertSent DateTime?
  userId        String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  budgetAlerts  BudgetAlert[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}

model BudgetAlert {
  id              String   @id @default(uuid())
  month           Int
  year            Int
  threshold50Sent Boolean  @default(false)
  threshold70Sent Boolean  @default(false)
  threshold90Sent Boolean  @default(false)
  budgetId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  budget          Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@unique([budgetId, month, year])
  @@index([budgetId])
  @@map("budget_alerts")
}

model Debt {
  id              String        @id @default(uuid())
  name            String
  totalAmount     Decimal
  remainingAmount Decimal
  interestRate    Decimal
  minimumPayment  Decimal
  dueDate         DateTime
  type            DebtType
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payments        DebtPayment[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[] @relation("DebtTransactions")

  @@index([userId])
  @@map("debts")
}

model DebtPayment {
  id        String   @id @default(uuid())
  amount    Decimal
  date      DateTime
  debtId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  debt      Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)

  @@index([debtId])
  @@map("debt_payments")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed     DateTime?
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  accountId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  debtId            String?
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  debt              Debt?              @relation("DebtTransactions", fields: [debtId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([debtId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum DebtType {
  MORTGAGE
  CREDIT_CARD
  STUDENT_LOAN
  CAR_LOAN
  PERSONAL_LOAN
  OTHER
}
